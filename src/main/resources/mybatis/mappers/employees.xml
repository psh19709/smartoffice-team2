<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.EmployeeMapper">

	<insert id="insertEmployee" parameterType="Employee">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select employees_seq.nextval from dual
		</selectKey>
		insert into employees
			(employee_no, employee_password, employee_name, employee_tel, employee_email, employee_hire_date, dept_no, position_no)
		values
			(#{no}, #{encryptPassword}, #{name}, #{tel}, #{email}, #{hireDate}, #{departmentNo}, #{positionNo})
	</insert>
	
	<update id="updateEmployee" parameterType="Employee">
		update
			employees
		set
			employee_password = #{encryptPassword},
			employee_photo = #{photo},
			employee_status = #{status},
			employee_update_date = sysdate
		where
			employee_no = #{no}
	</update>

	<select id="getEmployeeByNo" parameterType="int" resultType="Employee">
		select
			e.employee_no				as no,
			e.employee_password			as encryptPassword,
			e.employee_name				as name,
			e.employee_tel				as tel,
			e.employee_email			as email,
			e.employee_photo			as photo,
			e.employee_hire_date		as hireDate,
			e.employee_status			as status,
			e.employee_created_date		as createdDate,
			e.employee_updated_date		as updatedDate,
			d.dept_no					as deptNo,
			p.position_no				as positionNo
		from
			employees e, departments d, employee_positions p
		where
			e.employee_no = #{value}
		and e.dept_no = d.dept_no
		and e.position_no = p.position_no
	</select>
	
	<select id="getInsertEmployeeByNo" parameterType="int" resultType="EmployeeDetailDto">
		select
			e.employee_no				as no,
			e.employee_name				as name,
			e.employee_tel				as tel,
			e.employee_email			as email,
			e.employee_photo			as photo,
			e.employee_hire_date		as hireDate,
			e.employee_status			as status,
			e.employee_created_date		as createdDate,
			e.employee_updated_date		as updatedDate,
			d.dept_no					as deptNo,
			d.dept_name					as deptName,
			p.position_no				as positionNo,
			p.position_name				as positionName
		from
			employees e, departments d, employee_positions p
		where
			e.employee_no = #{value}
		and e.dept_no = d.dept_no
		and e.position_no = p.position_no
	</select>
	
	<select id="getEmployeeByEmail" parameterType="string" resultType="Employee">
		select
			e.employee_no				as no,
			e.employee_password			as encryptPassword,
			e.employee_name				as name,
			e.employee_tel				as tel,
			e.employee_email			as email,
			e.employee_photo			as photo,
			e.employee_hire_date		as hireDate,
			e.employee_status			as status,
			e.employee_created_date		as createdDate,
			e.employee_updated_date		as updatedDate,
			d.dept_no					as deptNo,
			p.position_no				as positionNo
		from
			employees e, departments d, employee_positions p
		where
			e.employee_email = #{value}
		and e.dept_no = d.dept_no
		and e.position_no = p.position_no
	</select>
	<select id="getEmployeeByName" parameterType="string" resultType="EmployeeDetailDto">
		select
			e.employee_no				as no,
			e.employee_name				as name,
			e.employee_tel				as tel,
			e.employee_email			as email,
			e.employee_photo			as photo,
			e.employee_hire_date		as hireDate,
			e.employee_status			as status,
			e.employee_created_date		as createdDate,
			e.employee_updated_date		as updatedDate,
			d.dept_no					as deptNo,
			d.dept_name					as deptName,
			p.position_no				as positionNo,
			p.position_name				as positionName
		from
			employees e, departments d, employee_positions p
		where
			e.employee_name = #{value}
		and e.dept_no = d.dept_no
		and e.position_no = p.position_no
			
	</select>
	
	<select id="getAllEmployeeTotalRows" parameterType="map" resultType="int">
		select
			count(*)
		from
			employees e, departments d
		where
			e.dept_no = d.dept_no
			<if test="opt != null">
				<choose>
					<when test="opt == 'empName'">
						and e.employee_name like '%' || #{keyword} || '%'
					</when>
					<when test="opt == 'empNo'">
						and e.employee_no like '%' || #{keyword} || '%'
					</when>
					<when test="opt == 'deptName'">
						and d.dept_no in (select
											dept_no
										from
											departments
										where
											dept_name = #{keyword})	
					</when>
				</choose>
			</if>
	</select>
	
	<select id="getAllEmployees" parameterType="map" resultType="EmployeeListDto">
		select
			employee_no			as empNo,
			employee_name		as empName,
			employee_tel		as tel,
			employee_email		as email,
			dept_name			as deptName,
			employee_status		as status
		from(
			select
				row_number() over (order by e.employee_no desc) row_numbers,
				e.employee_no,			
				e.employee_name,
				e.employee_tel,
				e.employee_email,
				d.dept_name,
				e.employee_status
			from
				employees e, departments d
			where
				e.dept_no = d.dept_no
				<if test="opt != null">
					<choose>
						<when test="opt == 'empName'">
							and e.employee_name like '%' || #{keyword} || '%'
						</when>
						<when test="opt == 'empNo'">
							and e.employee_no like '%' || #{keyword} || '%'
						</when>
						<when test="opt == 'deptName'">
							and d.dept_no in (select
												dept_no
											from
												departments
											where
												dept_name = #{keyword})	
						</when>
					</choose>
				</if>
			order by
				e.employee_name asc)
		where
			row_numbers between #{begin} and #{end}
	</select>
	
</mapper>