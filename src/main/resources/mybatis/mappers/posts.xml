<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.PostMapper">
	
	<insert id="insertPost" parameterType="com.example.vo.post.Post">
		insert into posts
			(post_no, employee_no, post_title, post_content)
		values
			(#{no}, #{employeeNo}, #{title}, #{content})
	</insert>

	<insert id="insertTag" parameterType="com.example.vo.post.Tag">
		insert into post_tags
			(post_no, tag_content)
		values
			(#{postNo}, #{content})
	</insert>
	
	<insert id="insertAttachedFile" parameterType="com.example.vo.post.AttachedFile">
		insert into post_attached_files
			(file_no, post_no, post_original_filename, post_saved_filename)
		values
			(post_attached_files_seq.nextval, #{postNo}, #{originalName}, #{savedName})	
	</insert>
	
	<insert id="insertComment" parameterType="com.example.vo.post.Comment">
		insert into post_comments
			(COMMENT_NO, EMPLOYEE_NO, POST_NO, COMMENT_CONTENT)
		values
			(#{no}, #{employeeNo}, #{postNo}, #{content})
	</insert>
	
	<insert id="insertPostScrap">
		insert into post_scraps
			(post_no, employee_no)
		values
			(#{postNo}, #{employeeNo})
	</insert>
	
	<insert id="insertPostRecommend">
		insert into post_recommends
			(post_no, employee_no)
		values
			(#{postNo}, #{employeeNo})
	</insert>
	
	<insert id="insertCommentRecommend">
		insert into post_comment_recommends
			(comment_no, employee_no)
		values
			(#{commentNo}, #{employeeNo})
	</insert>
	
	<select id="getPostSequence" resultType="int">
		select posts_seq.nextval
		from dual
	</select>
	
	<select id="getCommentSequence" resultType="int">
		select post_comments_seq.nextval
		from dual
	</select>

	<select id="getTotalRows" resultType="int">
		select
			count(*)
		from
			posts
		<where>
			<choose>
				<when test="type == 'title'">
					post_title like '%' || #{keyword} || '%'
				</when>
				<when test="type == 'content'">
					(post_content like '%' || #{keyword} || '%'
					 or post_title like '%' || #{keyword} || '%')
				</when>
				<when test="type == 'name'">
					employee_no in (select
										employee_no
									from
										employees
									where
										employee_name = #{keyword})	
				</when>
			</choose>
			<!-- 
			<if test="employeeNo != null">
				and employee_no = #{employeeNo}
			</if>
			 -->
			and post_deleted = 'N'
		</where>
	</select>
	
	<select id="getPostListDto" resultType="com.example.dto.post.PostListDto">
		select
		    post_no 				as no,
		    employee_name 			as name,
		    post_title 				as title,
		    post_read_count 		as readCount,
		    post_comment_count		as commentCount,
		    post_recommend_count 	as recommendCount,
		    post_created_date 		as createdDate
		from (
		     select
		     	 <choose>
		     	 	<when test="sort == 'date'">
						 row_number() over (order by A.post_created_date desc) row_numbers,
		     	 	</when>
		     	 	<when test="sort == 'recommend'">
						 row_number() over (order by A.post_recommend_count desc) row_numbers,
		     	 	</when>
		     	 	<when test="sort == 'read'">
						 row_number() over (order by A.post_read_count desc) row_numbers,
		     	 	</when>
		     	 	<when test="sort == 'comment'">
						 row_number() over (order by A.post_comment_count desc) row_numbers,
		     	 	</when>
		     	 	<when test="sort == 'scrap'">
						 row_number() over (order by A.post_scrap_count desc) row_numbers,
		     	 	</when>
		     	 </choose>
		         A.post_no,
		         B.employee_name,
		         A.post_title,
		         A.post_recommend_count,
		         A.post_read_count,
		         A.post_comment_count,
		         A.post_scrap_count,
		         A.post_created_date
		     from
		         posts A, employees B
		     <where>
		     	<choose>
		     		<when test="type == 'title'">
		     			A.post_title like '%' || #{keyword} || '%'
		     		</when>
		     		<when test="type == 'content'">
		     			(A.post_content like '%' || #{keyword} || '%'
		     			 or A.post_title like '%' || #{keyword} || '%')
		     		</when>
		     		<when test="type == 'name'">
		     			B.employee_name like '%' || #{keyword} || '%'
		     		</when>
		     	</choose>
		     	<!-- 
		     	<if test="employeeNo != null">
		     		and A.employee_no = #{employeeNo}
		     	</if>
		     	 -->
		         and A.post_deleted = 'N'
		         and A.employee_no = B.employee_no
		     </where>
		     )
		where
		    row_numbers between #{begin} and #{end}
	</select>

	<select id="getPostDetailDto" resultType="com.example.dto.post.PostDetailDto">
		select
			A.post_no				as no,
			A.employee_no			as employeeNo,
			B.employee_name			as name,
			A.post_title 			as title,
			A.post_content 			as content,
			A.post_read_count 		as readCount,
			A.post_recommend_count 	as recommendCount,
			A.post_scrap_count 		as scrapCount,
			A.post_created_date 	as createdDate,
			nvl((select 'true' from post_scraps where employee_no = #{employeeNo} and  post_no = #{postNo} ), 'false') as scrapped ,
			nvl((select 'true' from post_recommends where employee_no = #{employeeNo} and  post_no = #{postNo} ), 'false') as recommended
		from
			posts A, employees B
		where
			A.employee_no = B.employee_no
			and A.post_no	= #{postNo}
	</select>
	
	<select id="getCommentsByPostNo" resultType="com.example.dto.post.CommentDto">
		select
			A.comment_no				as no,
			A.employee_no				as employeeNo,
			B.employee_name				as name,
			A.comment_content			as content,
			A.comment_recommend_count	as recommendCount,
			A.comment_created_date		as createdDate,
			nvl((select 'true' from post_comment_recommends where employee_no = #{employeeNo} and  comment_no = A.comment_no ), 'false') as recommended
		from
			post_comments A, employees B
		where
			A.employee_no = B.employee_no
			and A.post_no	= #{postNo}
		order by A.comment_created_date desc	
	</select>
	
	<select id="getCommentDtoByCommentNo" resultType="com.example.dto.post.CommentDto">
		select
			A.comment_no				as no,
			A.employee_no				as employeeNo,
			B.employee_name				as name,
			A.comment_content			as content,
			A.comment_recommend_count	as recommendCount,
			A.comment_created_date		as createdDate,
			nvl((select 'true' from post_comment_recommends where comment_no = #{commentNo} and employee_no = #{employeeNo}), 'false') as recommended
		from
			post_comments A, employees B
		where
			A.employee_no = B.employee_no
			and A.comment_no = #{commentNo}
	</select>
	
	<select id="getCommentByNo" parameterType="int" resultType="com.example.vo.post.Comment">
		select
			COMMENT_NO 					as no,
			EMPLOYEE_NO 				as employeeNo,
			POST_NO						as postNo,
			COMMENT_CONTENT 			as content,
			COMMENT_RECOMMEND_COUNT 	as recommendCount,
			COMMENT_DELETED 			as deleted,
			COMMENT_CREATED_DATE 		as createdDate,
			COMMENT_UPDATED_DATE 		as updatedDate
		from
			post_comments
		where
			comment_no = #{value}
	</select>
	
	<select id="getAttachedFilesByPostNo" parameterType="int" resultType="com.example.vo.post.AttachedFile">
		select
			POST_NO					as postNo,
			POST_SAVED_FILENAME 	as savedName,
			POST_ORIGINAL_FILENAME	as originalName
		from
			POST_ATTACHED_FILES
		where
			post_no = #{value}
	</select>
	
	<select id="getTagsByPostNo" parameterType="int" resultType="com.example.vo.post.Tag">
		select
			post_no		as postNo,
			tag_content	as content
		from
			post_tags
		where
			post_no = #{value}	
	</select>
	
	<select id="getPostByNo" parameterType="int" resultType="com.example.vo.post.Post">
		select
			 post_no 				as no,
			 employee_no 			as employeeNo,
			 post_title 			as title,
			 post_content 			as content,
			 post_read_count 		as readCount,
			 post_recommend_count 	as recommendCount,
			 post_comment_count 	as commentCount,
			 post_scrap_count 		as scrapCount,
			 post_deleted 			as deleted,
			 post_created_date 		as createdDate,
			 post_updated_date 		as updatedDate
		from
			posts
		where
			post_no = #{value}
	</select>

	<update id="updatePost" parameterType="com.example.vo.post.Post">
		update
			posts
		set
			post_title 				= #{title},
			post_content 			= #{content},
			post_read_count 		= #{readCount},
			post_recommend_count 	= #{recommendCount},
			post_comment_count 		= #{commentCount},
			post_scrap_count 		= #{scrapCount},
			post_deleted 			= #{deleted},
			post_updated_date 		= sysdate
		where
			post_no = #{no}
	</update>
	
	<update id="updateComment" parameterType="com.example.vo.post.Comment">
		update
			post_comments
		set
			comment_content = #{content},
			comment_recommend_count = #{recommendCount},
			comment_deleted = #{deleted},
			comment_updated_date = sysdate
		where
			comment_no = #{no}
	</update>
	
	<delete id="deletePostScrap">
		delete from
			post_scraps
		where
			post_no = #{postNo}
			and employee_no = #{employeeNo}
	</delete>
	
	<delete id="deletePostRecommend">
		delete from
			post_recommends
		where
			post_no = #{postNo}
			and employee_no = #{employeeNo}
	</delete>
	
	<delete id="deleteCommentRecommend">
		delete from
			post_comment_recommends
		where
			comment_no = #{commentNo}
			and employee_no = #{employeeNo}
	</delete>
</mapper>